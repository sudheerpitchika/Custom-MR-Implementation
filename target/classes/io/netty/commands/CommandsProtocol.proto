/*
 * Copyright 2011 The Netty Project
 *
 * The Netty Project licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

// How to generate
// ===============
// $ cd example
// $ protoc src/main/java/io/netty/example/worldclock/WorldClockProtocol.proto --java_out=src/main/java 
//          
//
// Add @SuppressWarnings("all") to the generated code not to pollute IDE task list.



//package io.netty.example.commands;

option optimize_for = SPEED;

enum Instruction {
  START_DATA_NODE = 1;
  ACCEPT_DATA = 2;
  ACCEPT_JAR = 3;
  START_TASK_TRACKER = 4;
  START_MAP = 5;
  START_REDUCE = 6;
  RETURN_KEYS_AND_LOCATIONS = 7;
  ACCEPT_KEYS_AND_LOCATIONS = 8;
  RETURN_VALUES_FOR_KEY = 9;
  ACCEPT_SHUFFLER_DATA = 10;
  SHUTDOWN = 11;
}

message Location{
	required string ip = 1;
	required uint32 chunk = 2;
	required uint32 start = 3;
	required uint32 length = 4;
}

message Command {
  required uint32 commandId = 1;
  required string commandString = 2;
  optional string inputChunk = 3;							// for ACCEPT_DATA
  repeated KeyLocationsSet keysAndLocationsSet = 4;			// for ACCEPT_KEYS_AND_LOCATIONS
  optional KeyLocation keyLocation = 5;						// for RETURN_VALUES_FOR_KEY
  repeated KeyLocation keyLocationsMap = 6;					// for ACCEPT_DATA_SHUFFLER
}

message CommandResponse{
	required uint32 forCommandId = 1;
	required string forCommandString = 2;
	optional string responseText = 3;
	optional KeyValuesSet keyValuesSet = 4;				// for RETURN_VALUES_FOR_KEY
	repeated KeyLocation keyLocation = 5;				// for RETURN_KEYS_AND_LOCATIONS	
}

message KeyLocationsSet{
	required string key = 1;
	repeated Location locations = 2;
}

message KeyLocation{
	required string key = 1;
	required Location location = 2;
}


message HeartBeat{
	required uint32 forCommandId = 1;
	required bool status = 2;
}

message KeyValuesSet{
	required string key = 1;
	repeated string values = 2;
}

message KeyValue{
	required string key = 1;
	required string value = 2;
}